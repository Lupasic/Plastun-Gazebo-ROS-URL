/*************************************************************************
 * threads.h created at 13.11.2004 1:45:05
 * This is a part of "QNX CLasses" project
 * (c) by Sergei Khandrikov 2004
 *
 ************************************************************************/


/*
 * TThread.h
 *
 *  Modified on: 01.07.2010
 *      Author: andrey
 */

#ifndef TTHREAD_H_
#define TTHREAD_H_

#include <pthread.h>
#include <signal.h>

// Класс - нить процесса для реализации многопоточности. Для создания
// собственной нити необходимо переписать виртулаьный метод Main(), который
// является исполняемой функцией нити.
//##ModelId=41C84142005E
class	TThread
{
protected:

	// Идентификатор нити.
	pthread_t			thread;

	// Результат запуска нити.
	bool				is_running;

	// Атрибуты нити
	pthread_attr_t		attr;

	// Приоритет нити при вызове метода Suspend()
	int					old_prio;

	// планировщик
	int 				policy;
	//приоритет
	int  				prio;

	// Непосредственно исполняемая часть нити, откуда будет вызван метод
	// Main()
	static void*		start_routine(void* params);

	// Обработчик завершения нити.
	static void			cancel_routine(void* params);
public:

	// Доступ к аттрибутам нити.
	pthread_attr_t&		Attr() { return attr;};

	// Идентификатор нити
	pthread_t const& 	ID(){return thread;};

	// Метод - основная функция выполнения нити. Именно этот метод должен
	// быть переписан и должен содержать код выполняемый в контексте нити.
	virtual void*		Main() = 0;

	// Обработчик остановки работы нити
	virtual void		OnCancel(){};


	// Метод запуска нити.Необходимо вызвать этот метод для создания и
	// запуска нити.
	int				Run();

	// Посылка сигнала нити.
	void				Kill(
		// Посылаемый сигнал.
		int sig = SIGKILL);

	void waitfor();
	// Прекратить выполнение нити. Для прекращения нити рекомендуется
	// использовать именно этот метод. Этот же метод вызывается в деструкторе
	// объекта.
	void				Cancel();

	// Приостановить работу нити, установив ее приоритет в 0.
	void				Suspend();

	// Восстановить работу нити, возвратив ее приоритет в нормальной
	// состояние.
	void				Resume();

	// Установка приоритета нити. Если нить не запущена, то установлен будет
	// будущий ее приоритет.
	// Возвращает бывший приоритет.
	int				priority(
		// Новый приритет нитн
		int priority);

	// Получение текущего преоритета нити. Если нить не запущена, то бдет
	// возвращен приоритет с которым нить будет запущена.
	// Возвращает текущий приоритет.
	int				priority();

	// Установить правило работы планировщика задач с данной нитью.
	// Возвращает старое правило.
	int				sched_policy(
		// Новое правило.
		int policy);

	// Текущее правило работы планировщика задач с нитью.
	int				sched_policy();

    //Конструкторы:

	// Конструктор объекта "по-умолчанию"
	TThread();

	// Конструктор копирования объекта
	TThread(const TThread& src);

	// Конструктор объекта
	TThread(
		// Атрибуты создаваемой нити.
		const pthread_attr_t&	th_attr);

	// Деструктор объекта
	virtual ~TThread();
};



#endif /* TTHREAD_H_ */
